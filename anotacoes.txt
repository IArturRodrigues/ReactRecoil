eslint {
   yarn add -D eslint-plugin-react-hooks
   esse plugin verifica se os hooks estão sendo usados da maneira certa pelo react

   depois de baixar vá nas configurações do eslint {
      {
         "plugins": [
            // ...
            "react-hooks"
         ],
         "rules": {
            // ...
            "react-hooks/rules-of-hooks": "error", // Verifica as regras dos Hooks
            "react-hooks/exhaustive-deps": "warn" // Verifica as dependências de effects
         }
      }
   }
}

recoil {
   uma lib para gerenciamento de estado no react. Com ela, evitamos o prop drilling.

   o que e props drilling? É a forma normal do react de passar estados adiante.
   por exemploÇ eu tenho uma arvore com 3 componentes em que o 1o precisa receber o valor do estado e quem seta esse estado é o 3o componente (ou vice-versa), para que as informações de estado funcionem é necessário criar esses estados no componente pai e ir passando ele aos filhos onde os valores serão usados ou alterados, porém os componentes que ficam entre eles não estarão fazendo nada com esse estado além de passá-lo para frente, isso é o prop drilling, os componentes intermediários ficam sobrecarregado com estados que eles nem sequer estão usando, para evitar isso são utilizadas libs como recoil ou Context API.

   o inicio de tudo sao criar átomos que serão nossos estados.

   para que possamos usar esses estados precisamos de hooks do recoil {
      retorna o valor do estado: useRecoilValue(atom)
      seta o valor do estado: useSetRecoilValue(atom)
      retorna um array de 2 posições, a primeira é o valor do estado, a segunda seta o valor do estado (funciona da mesma forma que o useState do react): useRecoilState(atom)
   }

   para que os hooks tenham efeito é preciso que a aplicação ou o componente esteja envolvido pelo RecoilRoot, pois é ele quem vai providenciar nossos estados que estão sendo setados e recebidos em diferentes partes da aplicação. 

   seletores assíncronos {
      para fazermos um seletor assíncrono basta fazermos uma arrow function com async e o resto da implementação padrão do await.
      podemos colocar esse seletor assíncrono como valor padrão de um atom, basta apenas chamar o seletor na hora de setar o valor default.
      mas para que tudo funcione precisamos envolver a aplicação por um componente chamado Suspense, ele recebe um parâmetro chamado fallback que deve ser uma string ou um componente a ser executado enquanto a reposta nao chega, o Suspense deve estar dentro do RecoilRoot e antes da aplicação começar de fato.
      obs: os valores padrão de um atom podem ser assíncronas também, para saber como implementar basta olhar na documentação
   }

   observando as mudanças com recoil {
      tem um componente criado chamado DebugObserver que ele vai mostrar todas as alterações feita nos estados que sao monitorados pelo recoil, para saber mais sobre esses debuggers basta ver na documentação do recoil.

      caso dê algum erro de implementação dos observes talvez colocar a opção no tsconfig ajude {
         "downlevelIteration": true
      }

      links {
         doc sobre os observes: https://recoiljs.org/docs/guides/dev-tools
      }
   }
}

utilizar json server para simular uma chamada assíncrono {
   npm i -g json-server

   como usar {
      criar um arquivo na raiz chamado db.json e nele colocar o banco de dados fake

      para executar basta colocar o comando: json-server --watch db.json
      o ultimo parâmetro passado nesse comando é o caminho até o arquivo
      para mudar a porta basta colocar a tag -p numeroDaPorta depois do caminho até o arquivo
   }

   link {
      json server: https://github.com/typicode/json-server#getting-started
      artigo alura: https://www.alura.com.br/artigos/mockando-apis-rest-com-json-server
   }
}
